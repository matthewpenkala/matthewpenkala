class Leaf{constructor(a){this.children=[],this.parent=a}delete(a){const b=this.children.indexOf(a);return-1!==b&&(this.children=this.children.slice(0,b).concat(this.children.slice(b+1)),0===this.children.length&&this.parent.delete(this),!0)}add(a){return this.children.push(a),this}}class RadixTrie{constructor(a){this.parent=null,this.children={},this.parent=a||null}get(a){return this.children[a]}insert(a){let b=this;for(let c=0;c<a.length;c+=1){const d=a[c];let e=b.get(d);if(c==a.length-1)return e instanceof RadixTrie&&(b.delete(e),e=null),e||(e=new Leaf(b),b.children[d]=e),e;e instanceof Leaf&&(e=null),e||(e=new RadixTrie(b),b.children[d]=e);b=e}return b}delete(a){for(const b in this.children){const c=this.children[b];if(c===a){const a=delete this.children[b];return 0===Object.keys(this.children).length&&this.parent&&this.parent.delete(this),a}}return!1}}function isFormField(a){if(!(a instanceof HTMLElement))return!1;const b=a.nodeName.toLowerCase(),c=(a.getAttribute("type")||"").toLowerCase();return"select"===b||"textarea"===b||"input"===b&&"submit"!==c&&"reset"!==c&&"checkbox"!==c&&"radio"!==c&&"file"!==c||a.isContentEditable}function fireDeterminedAction(a,b){const c=new CustomEvent("hotkey-fire",{cancelable:!0,detail:{path:b}}),d=!a.dispatchEvent(c);d||(isFormField(a)?a.focus():a.click())}function expandHotkeyToEdges(a){const b=[];let c=[""],d=!1;for(let e=0;e<a.length;e++){if(d&&","===a[e]){b.push(c),c=[""],d=!1;continue}if(" "===a[e]){c.push(""),d=!1;continue}else d="+"!==a[e];c[c.length-1]+=a[e]}return b.push(c),b.map(a=>a.filter(a=>""!==a)).filter(a=>0<a.length)}function hotkey(a){const{ctrlKey:b,altKey:c,metaKey:d,key:e}=a,f=[],g=[b,c,d,showShift(a)];for(const[b,c]of g.entries())c&&f.push(modifierKeyNames[b]);return modifierKeyNames.includes(e)||f.push(e),f.join("+")}const modifierKeyNames=[`Control`,"Alt","Meta","Shift"];function showShift(a){const{shiftKey:b,code:c,key:d}=a;return b&&!(c.startsWith("Key")&&d.toUpperCase()===d)}const hotkeyRadixTrie=new RadixTrie,elementsLeaves=new WeakMap;let currentTriePosition=hotkeyRadixTrie,resetTriePositionTimer=null,path=[];function resetTriePosition(){path=[],resetTriePositionTimer=null,currentTriePosition=hotkeyRadixTrie}function keyDownHandler(a){if(!a.defaultPrevented&&a.target instanceof Node){if(isFormField(a.target)){const b=a.target;if(!b.id)return;if(!b.ownerDocument.querySelector(`[data-hotkey-scope="${b.id}"]`))return}null!=resetTriePositionTimer&&window.clearTimeout(resetTriePositionTimer),resetTriePositionTimer=window.setTimeout(resetTriePosition,1500);const b=currentTriePosition.get(hotkey(a));if(!b)return void resetTriePosition();if(path.push(hotkey(a)),currentTriePosition=b,b instanceof Leaf){const c=a.target;let d,e=!1;const f=isFormField(c);for(let a=b.children.length-1;0<=a;a-=1){d=b.children[a];const g=d.getAttribute("data-hotkey-scope");if(!f&&!g||f&&c.id===g){e=!0;break}}d&&e&&(fireDeterminedAction(d,path),a.preventDefault()),resetTriePosition()}}}function install(a,b){0===Object.keys(hotkeyRadixTrie.children).length&&document.addEventListener("keydown",keyDownHandler);const c=expandHotkeyToEdges(b||a.getAttribute("data-hotkey")||""),d=c.map(b=>hotkeyRadixTrie.insert(b).add(a));elementsLeaves.set(a,d)}function uninstall(a){const b=elementsLeaves.get(a);if(b&&b.length)for(const c of b)c&&c.delete(a);0===Object.keys(hotkeyRadixTrie.children).length&&document.removeEventListener("keydown",keyDownHandler)}export{Leaf,RadixTrie,hotkey as eventToHotkeyString,install,uninstall};