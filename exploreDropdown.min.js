$(document).ready(function() {
    // -------------------------------------
    // Configuration & State
    // -------------------------------------
    const DROPDOWN_LIST_SELECTOR = '#w-dropdown-list-0';
    const OPEN_CLASS = 'w--open';
    const ROTATION_DURATION = 250; // milliseconds
    let isArrowOpen = false; // Tracks whether the arrow is currently rotated (true) or not (false)

    // -------------------------------------
    // Element References
    // -------------------------------------
    const $hoverableElements = $("[class*='navbar-menu-item']")
        .filter(":contains('Explore')")
        .closest("[data-hover]")
        .find("*:not(path)");

    const $toggleElement = $hoverableElements.filter(".w-dropdown-toggle").first();
    const $arrowElement  = $hoverableElements.find("svg").parent().first();
    const $dropdownList  = $(DROPDOWN_LIST_SELECTOR);

    // Start arrow at 0Â°
    $arrowElement.css("transform", "rotate(0deg)");

    // -------------------------------------
    // Rotation & Easing Functions
    // -------------------------------------
    function customEasing(t) {
        return (t < 0.5) 
            ? 4 * t * t * t 
            : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
    }

    function rotateArrow(element, duration, open) {
        return new Promise(resolve => {
            const startAngle = open ? 0   : 180;
            const endAngle   = open ? 180 : 0;
            const startTime  = performance.now();

            function animate(timestamp) {
                const elapsed      = timestamp - startTime;
                const progress     = Math.min(elapsed / duration, 1);
                const eased        = customEasing(progress);
                const currentAngle = startAngle + (endAngle - startAngle) * eased;
                
                element.style.transform = `rotate(${currentAngle}deg)`;

                if (elapsed < duration) {
                    requestAnimationFrame(animate);
                } else {
                    resolve();
                }
            }

            requestAnimationFrame(animate);
        });
    }

    // -------------------------------------
    // Event Handlers
    // -------------------------------------

    // Hover in: Rotate arrow open if not already open
    $toggleElement.hover(
        function() {
            if (!isArrowOpen && $arrowElement.length) {
                $(this).addClass("w-hover");
                rotateArrow($arrowElement[0], ROTATION_DURATION, true).then(() => {
                    isArrowOpen = true;
                    // After giving time for the dropdown to actually open, check if it's open
                    setTimeout(() => {
                        if (!$dropdownList.hasClass(OPEN_CLASS) && isArrowOpen) {
                            // Dropdown never opened fully; revert the arrow
                            $toggleElement.removeClass("w-hover");
                            rotateArrow($arrowElement[0], ROTATION_DURATION, false).then(() => {
                                isArrowOpen = false;
                            });
                        }
                    }, 100); // Adjust delay as needed
                });
            }
        },
        function() {
            // Do not rotate back on hover out. The arrow stays open if the dropdown is open.
        }
    );

    // Click: If closed, rotate open. Rely on observer to close, or the fallback check above.
    $toggleElement.click(function() {
        if (!isArrowOpen && $arrowElement.length) {
            $(this).addClass("w-hover");
            rotateArrow($arrowElement[0], ROTATION_DURATION, true).then(() => {
                isArrowOpen = true;
                // Similar fallback check in case the dropdown doesn't open:
                setTimeout(() => {
                    if (!$dropdownList.hasClass(OPEN_CLASS) && isArrowOpen) {
                        $toggleElement.removeClass("w-hover");
                        rotateArrow($arrowElement[0], ROTATION_DURATION, false).then(() => {
                            isArrowOpen = false;
                        });
                    }
                }, 100);
            });
        }
    });

    // MutationObserver: When w--open is removed, rotate arrow back
    const observer = new MutationObserver(mutations => {
        for (const mutation of mutations) {
            if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
                const currentlyOpen = $dropdownList.hasClass(OPEN_CLASS);
                if (!currentlyOpen && isArrowOpen) {
                    $toggleElement.removeClass("w-hover");
                    rotateArrow($arrowElement[0], ROTATION_DURATION, false).then(() => {
                        isArrowOpen = false;
                    });
                }
            }
        }
    });

    observer.observe($dropdownList[0], { attributes: true });
});
