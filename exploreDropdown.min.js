$(document).ready(function() {
    // -------------------------------------
    // Configuration & State
    // -------------------------------------
    const DROPDOWN_LIST_SELECTOR = '#w-dropdown-list-0';
    const OPEN_CLASS = 'w--open';
    const ROTATION_DURATION = 250; // milliseconds
    let isArrowOpen = false; // Tracks whether the arrow is currently rotated (true) or not (false)

    // -------------------------------------
    // Element References
    // -------------------------------------
    const hoverableElements = $("[class*='navbar-menu-item']")
        .filter(":contains('Explore')")
        .closest("[data-hover]")
        .find("*:not(path)");

    const $toggleElement = hoverableElements.filter(".w-dropdown-toggle").first();
    const $arrowElement  = hoverableElements.find("svg").parent().first();
    const $dropdownList  = $(DROPDOWN_LIST_SELECTOR);

    // Ensure the arrow starts at 0° (closed)
    $arrowElement.css("transform", "rotate(0deg)");

    // -------------------------------------
    // Rotation & Easing Functions
    // -------------------------------------
    /**
     * Custom easing function for smoother rotations.
     * @param {number} t - A progress value between 0 and 1.
     * @returns {number} Eased progress value.
     */
    function customEasing(t) {
        return (t < 0.5) 
            ? 4 * t * t * t 
            : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
    }

    /**
     * Rotate the arrow element to the "open" or "closed" position.
     * @param {HTMLElement} element - The arrow element to rotate.
     * @param {number} duration - The rotation animation duration in ms.
     * @param {boolean} open - If true, rotate from 0° to 180°. If false, rotate from 180° to 0°.
     * @returns {Promise} Resolves when the animation completes.
     */
    function rotateArrow(element, duration, open) {
        return new Promise(resolve => {
            const startAngle = open ? 0   : 180;
            const endAngle   = open ? 180 : 0;
            const startTime  = performance.now();

            function animate(timestamp) {
                const elapsed      = timestamp - startTime;
                const progress     = Math.min(elapsed / duration, 1);
                const eased        = customEasing(progress);
                const currentAngle = startAngle + (endAngle - startAngle) * eased;
                
                element.style.transform = `rotate(${currentAngle}deg)`;

                if (elapsed < duration) {
                    requestAnimationFrame(animate);
                } else {
                    resolve();
                }
            }

            requestAnimationFrame(animate);
        });
    }

    // -------------------------------------
    // Event Handlers
    // -------------------------------------

    // Hover in: Rotate arrow open if it's not already open
    $toggleElement.hover(
        function() {
            if (!isArrowOpen && $arrowElement.length) {
                $(this).addClass("w-hover");
                rotateArrow($arrowElement[0], ROTATION_DURATION, true).then(() => {
                    isArrowOpen = true;
                });
            }
        },
        // Hover out: Do not rotate back here. The arrow should remain open as long as the dropdown is open.
        function() {
            // Intentionally left blank.
        }
    );

    // Click: If currently closed, rotate it open. Closing will be handled by the observer when dropdown loses the class.
    $toggleElement.click(function() {
        if (!isArrowOpen && $arrowElement.length) {
            $(this).addClass("w-hover");
            rotateArrow($arrowElement[0], ROTATION_DURATION, true).then(() => {
                isArrowOpen = true;
            });
        }
    });

    // -------------------------------------
    // MutationObserver: Watches for the removal of 'w--open' from the dropdown.
    // When 'w--open' is removed, it indicates the dropdown has closed,
    // so we rotate the arrow back to 0°.
    // -------------------------------------
    const observer = new MutationObserver(mutations => {
        for (const mutation of mutations) {
            if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
                const currentlyOpen = $dropdownList.hasClass(OPEN_CLASS);
                if (!currentlyOpen && isArrowOpen) {
                    $toggleElement.removeClass("w-hover");
                    rotateArrow($arrowElement[0], ROTATION_DURATION, false).then(() => {
                        isArrowOpen = false;
                    });
                }
            }
        }
    });

    // Start observing the dropdown list for class changes
    observer.observe($dropdownList[0], { attributes: true });
});
